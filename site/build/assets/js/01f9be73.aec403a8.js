"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9980],{3905:(e,i,r)=>{r.d(i,{Zo:()=>d,kt:()=>m});var n=r(67294);function t(e,i,r){return i in e?Object.defineProperty(e,i,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[i]=r,e}function a(e,i){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);i&&(n=n.filter((function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var i=1;i<arguments.length;i++){var r=null!=arguments[i]?arguments[i]:{};i%2?a(Object(r),!0).forEach((function(i){t(e,i,r[i])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(i){Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(r,i))}))}return e}function s(e,i){if(null==e)return{};var r,n,t=function(e,i){if(null==e)return{};var r,n,t={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],i.indexOf(r)>=0||(t[r]=e[r]);return t}(e,i);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],i.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var c=n.createContext({}),l=function(e){var i=n.useContext(c),r=i;return e&&(r="function"==typeof e?e(i):o(o({},i),e)),r},d=function(e){var i=l(e.components);return n.createElement(c.Provider,{value:i},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var i=e.children;return n.createElement(n.Fragment,{},i)}},v=n.forwardRef((function(e,i){var r=e.components,t=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(r),v=t,m=u["".concat(c,".").concat(v)]||u[v]||p[v]||a;return r?n.createElement(m,o(o({ref:i},d),{},{components:r})):n.createElement(m,o({ref:i},d))}));function m(e,i){var r=arguments,t=i&&i.mdxType;if("string"==typeof e||t){var a=r.length,o=new Array(a);o[0]=v;var s={};for(var c in i)hasOwnProperty.call(i,c)&&(s[c]=i[c]);s.originalType=e,s[u]="string"==typeof e?e:t,o[1]=s;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}v.displayName="MDXCreateElement"},75957:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(87462),t=(r(67294),r(3905));const a={slug:"/microservices",sidebar_label:"Microservices"},o="Microservices",s={unversionedId:"microservices",id:"microservices",title:"Microservices",description:"Microservices architecture is an approach to building software applications that focuses on breaking down the",source:"@site/docs/10-microservices.md",sourceDirName:".",slug:"/microservices",permalink:"/microservices",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{slug:"/microservices",sidebar_label:"Microservices"},sidebar:"defaultSidebar",previous:{title:"CI/CD Pipelines",permalink:"/cicd-pipelines"},next:{title:"Environments",permalink:"/environments"}},c={},l=[{value:"12 Factor App Principles",id:"12-factor-app-principles",level:2},{value:"Cloud Native Microservices",id:"cloud-native-microservices",level:2},{value:"Environment Variables for Microservices Configuration",id:"environment-variables-for-microservices-configuration",level:2},{value:"Injecting Secrets Configuration for Microservices",id:"injecting-secrets-configuration-for-microservices",level:2},{value:"CICD Pipelines for Microservices",id:"cicd-pipelines-for-microservices",level:2}],d={toc:l},u="wrapper";function p(e){let{components:i,...r}=e;return(0,t.kt)(u,(0,n.Z)({},d,r,{components:i,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"microservices"},"Microservices"),(0,t.kt)("p",null,"Microservices architecture is an approach to building software applications that focuses on breaking down the\napplication into small, independent services that can be developed, deployed, and scaled independently. Each\nmicroservice is responsible for a specific business function and can communicate with other microservices through APIs."),(0,t.kt)("h2",{id:"12-factor-app-principles"},"12 Factor App Principles"),(0,t.kt)("p",null,"When developing microservices, it's important to follow the 12 factor app principles, which are a set of best practices\nfor building scalable and maintainable applications. The 12 factors include:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"Codebase: Each microservice should have a separate codebase that is tracked in version control."),(0,t.kt)("li",{parentName:"ol"},"Dependencies: Each microservice should have explicit dependencies that are isolated from other microservices."),(0,t.kt)("li",{parentName:"ol"},"Config: Configuration should be stored in environment variables, and not in code."),(0,t.kt)("li",{parentName:"ol"},"Backing Services: Each microservice should treat backing services (such as databases) as attached resources that can\nbe\nattached and detached at will."),(0,t.kt)("li",{parentName:"ol"},"Build, release, run: Each microservice should be built into a deployable artifact, and then released and run\nindependently."),(0,t.kt)("li",{parentName:"ol"},"Processes: Each microservice should be stateless and share nothing with other microservices."),(0,t.kt)("li",{parentName:"ol"},"Port Binding: Each microservice should export services via a port binding mechanism such as HTTP."),(0,t.kt)("li",{parentName:"ol"},"Concurrency: Each microservice should be designed to be horizontally scalable."),(0,t.kt)("li",{parentName:"ol"},"Disposability: Each microservice should be designed to be disposable and easily restarted or terminated."),(0,t.kt)("li",{parentName:"ol"},"Dev/Prod parity: The development, staging, and production environments should be as similar as possible."),(0,t.kt)("li",{parentName:"ol"},"Logs: Each microservice should log to standard output, and log data should be collected and analyzed centrally."),(0,t.kt)("li",{parentName:"ol"},"Admin Processes: Administrative tasks such as database migrations should be run as one-off processes.")),(0,t.kt)("h2",{id:"cloud-native-microservices"},"Cloud Native Microservices"),(0,t.kt)("p",null,"Microservices can be designed to be cloud native, which means they are designed to run in the cloud and take advantage\nof cloud services such as auto-scaling, load balancing, and containerization. To build cloud native microservices, you\nshould follow best practices such as:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"Use containerization: Microservices should be deployed in containers using technologies such as Docker and\nKubernetes."),(0,t.kt)("li",{parentName:"ol"},"Use environment variables for configuration: Configuration should be stored in environment variables, which can be\neasily managed and updated."),(0,t.kt)("li",{parentName:"ol"},"Use secrets for sensitive data: Secrets such as passwords and API keys should be stored in Kubernetes Secrets, which\ncan\nbe securely managed and accessed."),(0,t.kt)("li",{parentName:"ol"},"Use CICD pipelines: Microservices should be built, tested, and deployed using a CICD pipeline that automates the\nentire\nprocess.")),(0,t.kt)("h2",{id:"environment-variables-for-microservices-configuration"},"Environment Variables for Microservices Configuration"),(0,t.kt)("p",null,"Environment variables are a key mechanism for injecting configuration into microservices. By storing configuration in\nenvironment variables, you can easily manage and update the configuration without having to modify the code. Environment\nvariables can be set at the container level or at the pod level in Kubernetes. In addition, Kubernetes provides a\nConfigMap resource that can be used to store configuration data as key-value pairs."),(0,t.kt)("h2",{id:"injecting-secrets-configuration-for-microservices"},"Injecting Secrets Configuration for Microservices"),(0,t.kt)("p",null,"When deploying microservices on Kubernetes, it's important to manage sensitive data such as passwords and API keys\nsecurely. Kubernetes provides a Secrets resource that can be used to store sensitive data. Secrets can be mounted as\nfiles or environment variables in the container running the microservice. You can also use tools such as HashiCorp Vault\nto manage and securely distribute secrets."),(0,t.kt)("h2",{id:"cicd-pipelines-for-microservices"},"CICD Pipelines for Microservices"),(0,t.kt)("p",null,"CICD pipelines are a critical part of the microservices development process. A CICD pipeline automates the process of\nbuilding, testing, and deploying microservices, which helps to ensure that the microservices are delivered quickly"))}p.isMDXComponent=!0}}]);