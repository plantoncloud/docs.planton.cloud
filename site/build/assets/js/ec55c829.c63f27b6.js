"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2358],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),a=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},d=function(e){var t=a(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=a(n),f=o,m=u["".concat(l,".").concat(f)]||u[f]||s[f]||i;return n?r.createElement(m,p(p({ref:t},d),{},{components:n})):r.createElement(m,p({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,p=new Array(i);p[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:o,p[1]=c;for(var a=2;a<i;a++)p[a]=n[a];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},38790:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>s,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var r=n(87462),o=(n(67294),n(3905));const i={title:"",slug:"/cli//planton/product/code/pipeline/init",sidebar_label:"init"},p=void 0,c={unversionedId:"cli/planton/product/code/pipeline/init",id:"cli/planton/product/code/pipeline/init",title:"",description:"planton product code pipeline init",source:"@site/docs/99-cli/planton/product/code/pipeline/init.md",sourceDirName:"99-cli/planton/product/code/pipeline",slug:"/cli//planton/product/code/pipeline/init",permalink:"/cli/planton/product/code/pipeline/init",draft:!1,tags:[],version:"current",frontMatter:{title:"",slug:"/cli//planton/product/code/pipeline/init",sidebar_label:"init"},sidebar:"defaultSidebar",previous:{title:"delete",permalink:"/cli/planton/product/code/pipeline/delete"},next:{title:"generate",permalink:"/cli/planton/product/code/pipeline/template/generate"}},l={},a=[{value:"planton product code pipeline init",id:"planton-product-code-pipeline-init",level:2},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3}],d={toc:a},u="wrapper";function s(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"planton-product-code-pipeline-init"},"planton product code pipeline init"),(0,o.kt)("p",null,"initialize code pipeline for project"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"planton product code pipeline init [flags]\n")),(0,o.kt)("h3",{id:"options"},"Options"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'      --code-project-dir string   code project directory path (default "/Users/swarup/scm/gitlab.com/plantoncode/planton/pcs/microservice/docs/site/docs")\n  -h, --help                      help for init\n')),(0,o.kt)("h3",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"      --debug                   set log level to debug\n      --dry                     dry run gitr commands\n      --product-env-id string   id of the product environment\n      --product-id string       id of the product\n      --product-key string      key of the product\n")))}s.isMDXComponent=!0}}]);